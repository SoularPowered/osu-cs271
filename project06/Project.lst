Microsoft (R) Macro Assembler Version 14.00.23506.0	    02/25/16 22:55:28
3Programming Assignment 6    (project06-hillyer.asm	     Page 1 - 1


				TITLE Programming Assignment 6    (project06-hillyer.asm)
				; =====================================================================================
				; Author:                  Shawn S Hillyer
				; Email:                   hillyers@oregonstate.edu
				; CS271-400 / Project ID:  Programming Assignment 6
				; Due Date:                03/13/2016
				; =====================================================================================

				; =====================================================================================
				; [Problem Definition]
				; + Implement and test your own ReadVal and WriteVal procedures for unsigned integers.
				; + Implement macros getString and displayString. The macros may use Irvine’s ReadString 
				;   to get input from the user, and WriteString to display output. [ DONE ]
				;   - getString should display a prompt, then get the user’s keyboard input into a 
				;     memory location [DONE]
				;   - displayString should display the string stored in a specified memory location.
				;   - readVal should invoke the getString macro to get the user’s string of digits. 
				;     It should then convert the digit string to numeric, while validating the user’s 
				;     input.
				;   - writeVal should convert a numeric value to a string of digits, and invoke the 
				;     displayString macro to produce the output.
				; + Write a small test program that gets 10 valid integers from the user and stores 
				;   the numeric values in an array. The program then displays the integers, 
				;   their sum, and their average.
				; =====================================================================================

				; =====================================================================================
				; [Requirements]
				;  1) User’s numeric input must be validated the hard way: Read the user's input as a 
				;     string, and convert the string to numeric form. If the user enters non-digits or 
				;     the number is too large for 32-bit registers, an error message should be displayed
				;     and the number should be discarded.
				;  2) Conversion routines must appropriately use the lodsb and/or stosb operators.
				;  3) All procedure parameters must be passed on the system stack.
				;  4) Addresses of prompts, identifying strings, and other memory locations should be 
				;     passed by address to the macros.
				;  5) Used registers must be saved and restored by the called procedures and macros.
				;  6) The stack must be “cleaned up” by the called procedure.
				;  7) The usual requirements regarding documentation, readability, user-friendliness, etc., apply.
				;  8) Submit your text code file (.asm) to Canvas by the due date.
				; =====================================================================================

				; =====================================================================================
				; [Extra-credit options]
				; [Not Implemented]	1. [1 point ]: Number each line of user input and display a 
				;                          running subtotal of the user's numbers
				; [Not Implemented]	2. [2 points]: Handle signed integers.
				; [Not Implemented]	3. [3 points]: make your ReadVal and WriteVal procedures recursive.
				; [Not Implemented]	4. [4 points]: implement procedures ReadVal and WriteVal for 
				;                          floating point values, using the FPU.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; *********************
				; Macros              *
				; *********************

				; +============================================================+
				; getString MACRO promptAddr:REQ, outStringAddr:REQ
				; Description: Displays a prompt then get user's keyboard input 
				; into a memory location stored as a string into outString	
				; Receives:		
				; +------------------------------------------------------------+
				getString MACRO promptAddr:REQ, outStringAddr:REQ
				;; Save used registers
					push	edx
					push	ecx

				; Display prompt for user
					displayString promptAddr

				; Get user's keyboard input into the outString variable location
					mov		edx, outStringAddr
					mov		ecx, BUFFER_SIZE 
					call	ReadString

				;; Restore registers
					pop		ecx
					pop		edx

				;; +------------------------------------------------------------+	
				ENDM
				; +============================================================+


				; +============================================================+
				; displayString MACRO stringAddr:REQ
				; Description: Displays the string stored in specified mem location
				; Receives:
				; +------------------------------------------------------------+
				displayString MACRO stringAddr:REQ
				;; Save used registers
					push	edx

				;; Use WriteString to display the string stored in memory address	
					mov		edx, stringAddr
					call	WriteString

				;; Restore registers
					pop		edx

				;; +------------------------------------------------------------+
				ENDM
				; +============================================================+


				; Set up the stack frame pointer
				mSetStackFrame MACRO
					push	ebp
					mov		ebp, esp
				ENDM

				; Restores a stack before returning with optional arguments to restore with ret call
				mCleanStackFrame MACRO argBytes
					mov		esp, ebp ; remove any locals from stack
					pop		ebp
					ret		argBytes
				ENDM


				; *********************
				; Constants           *
				; *********************
 = FFFFFFFF			MAX_UNSIGNED_INT EQU 4294967295   ; maximum value that fits in 32 bit unsigned DWORD
 = 0000000A			MAX_DIGITS = 10                 ; maximum digits that a user can enter and still (possibly) be 32 bit unsigned int
 = 0000000A			DATA_ARRAY_SIZE = 10
 = 00000028			BUFFER_SIZE = DATA_ARRAY_SIZE + 30
 = 0000000B			MAX_BUFFER_SIZE = DATA_ARRAY_SIZE + 1
 = 00000030			ASCII_ZERO = 48
 = 00000039			ASCII_NINE = 57


				; *********************
				; Variables           *
				; *********************
 00000000			.data

				; Strings - Output
 00000000 50 52 4F 47 52		intro			BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",0Dh,0Ah
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A
 0000003E  57 72 69 74 74						BYTE	"Written by Shawn S Hillyer",0
	   65 6E 20 62 79
	   20 53 68 61 77
	   6E 20 53 20 48
	   69 6C 6C 79 65
	   72 00
				;	ecIntro_1		BYTE	"**EC: ",0
				;	ecIntro_2		BYTE	"**EC: ",0
				;	ecIntro_3		BYTE	"**EC: ",0
				;	ecIntro_4		BYTE	"**EC: ",0
 00000059 00000000 R			pIntro			DWORD	OFFSET intro
					
 0000005D 50 6C 65 61 73		instructions	BYTE	"Please provide 10 unsigned decimal integers.",0Dh,0Ah
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 75 6E
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 0D
	   0A
 0000008B  45 61 63 68 20						BYTE	"Each number needs to be small enough to fit inside a 32 bit register.",0Dh,0Ah
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A
 000000D2  41 66 74 65 72						BYTE	"After you have finished inputting the raw numbers I will display a list",0Dh,0Ah
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 0D 0A
 0000011B  6F 66 20 74 68						BYTE	"of the integers, their sum, and their average value.",0
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 00
 00000150 0000005D R			pInstructions	DWORD	OFFSET instructions

 00000154 50 6C 65 61 73		valuePrompt		BYTE	"Please enter an unsigned number:  ",0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 75 6E 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 3A 20 20 00
 00000177 00000154 R			pValuePrompt	DWORD	OFFSET valuePrompt

 0000017B 45 52 52 4F 52		badInputMsg		BYTE	"ERROR: You did not enter an unsigned number or your number was too big.",0Dh,0Ah
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 75 6E
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 6F
	   72 20 79 6F 75
	   72 20 6E 75 6D
	   62 65 72 20 77
	   61 73 20 74 6F
	   6F 20 62 69 67
	   2E 0D 0A
 000001C4  50 6C 65 61 73						BYTE	"Please try again:  ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 20 00
 000001D8 0000017B R			pBadInputMsg	DWORD	OFFSET badInputMsg

 000001DC 59 6F 75 20 65		numbersMsg		BYTE	"You entered the following numbers: ",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 00000200 000001DC R			pNumbersMsg		DWORD	OFFSET numbersMsg
 00000204 54 68 65 20 73		sumMsg			BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000222 00000204 R			pSumMsg			DWORD	OFFSET sumMsg
 00000226 54 68 65 20 61		avgMsg			BYTE	"The average is: ",0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000237 00000226 R			pAvgMsg			DWORD	OFFSET avgMsg

 0000023B 47 65 74 74 69		goodbye		BYTE	"Getting down low with the in and the out was fun!",0
	   6E 67 20 64 6F
	   77 6E 20 6C 6F
	   77 20 77 69 74
	   68 20 74 68 65
	   20 69 6E 20 61
	   6E 64 20 74 68
	   65 20 6F 75 74
	   20 77 61 73 20
	   66 75 6E 21 00
 0000026D 0000023B R			pGoodbye		DWORD	OFFSET goodbye

				; Data Variables
 00000271  0000000A [			userData		DWORD	DATA_ARRAY_SIZE DUP(0)	; Array to store Unsigned Integers
	    00000000
	   ]
 00000299 = 00000028			userDataSize = ($ - userData)
 00000299 00000271 R			pUserData		DWORD	OFFSET userData
					
 0000029D 00000000			singleInt		DWORD	0
 000002A1  00000028 [			rawStringIn		BYTE	BUFFER_SIZE DUP(0)
	    00
	   ]
 000002C9 000002A1 R			pRawStringIn	DWORD	rawStringIn
 000002CD 00000000			dataSum			DWORD	0		; The sum of the userData array
 000002D1 00000000			dataAvg			DWORD	0		; Average of the data stored in userData array
					


 00000000			.code

				; +============================================================+
 00000000			main PROC
				; Description:	Main program logic. Generates random numbers, prints
				;   in unsorted order, then sorts and prints median and sorted order.
				; Receives:		None
				; Returns:		None
				; Pre:			None
				; Reg Changed:	Potentially all - main entrypoint
				; +------------------------------------------------------------+

				; Display the program title and programmer's name & Get the user's name, and greet the user.
					displayString 	pIntro
 00000000  52		     1		push	edx
 00000001  8B 15 00000059 R  1		mov		edx, pIntro
 00000007  E8 00000000 E     1		call	WriteString
 0000000C  5A		     1		pop		edx
 0000000D  E8 00000000 E		call			CrLf
 00000012  E8 00000000 E		call			CrLF

				; Display instructions for the user.
					displayString 	pInstructions
 00000017  52		     1		push	edx
 00000018  8B 15 00000150 R  1		mov		edx, pInstructions
 0000001E  E8 00000000 E     1		call	WriteString
 00000023  5A		     1		pop		edx
 00000024  E8 00000000 E		call			CrLf
 00000029  E8 00000000 E		call			CrLF

				; Prompt user for the 10 values and store them in an array
 0000002E  FF 35 000002C9 R		push	pRawStringIn
 00000034  B8 0000000A			mov		eax, DATA_ARRAY_SIZE
 00000039  50				push	eax			; arrSize
 0000003A  FF 35 00000299 R		push	pUserData	; pArr
 00000040  E8 00000145			call	getUserData
 00000045  E8 00000000 E		call	CrLF

				; Calculate the sum and average of the array
 0000004A  68 000002D1 R		push	offset	dataAvg
 0000004F  68 000002CD R	push	offset dataSum
 00000054  B8 0000000A			mov		eax, DATA_ARRAY_SIZE
 00000059  50				push	eax
 0000005A  FF 35 00000299 R		push	pUserData
 00000060  E8 0000014E			call	sumAvgArray
					
				; Print the values entered
					displayString pNumbersMsg
 00000065  52		     1		push	edx
 00000066  8B 15 00000200 R  1		mov		edx, pNumbersMsg
 0000006C  E8 00000000 E     1		call	WriteString
 00000071  5A		     1		pop		edx
 00000072  B8 0000000A			mov		eax, DATA_ARRAY_SIZE
 00000077  50				push	eax
 00000078  FF 35 00000299 R		push	pUserData
 0000007E  E8 00000000 E		call	CrLf
 00000083  E8 00000146			call	printArray
 00000088  E8 00000000 E		call	CrLf

				; Print the sum
					displayString pSumMsg
 0000008D  52		     1		push	edx
 0000008E  8B 15 00000222 R  1		mov		edx, pSumMsg
 00000094  E8 00000000 E     1		call	WriteString
 00000099  5A		     1		pop		edx
 0000009A  A1 000002CD R		mov		eax, dataSum
 0000009F  E8 00000000 E		call	WriteDec
 000000A4  E8 00000000 E		call	CrLf

				; Print the average
					displayString pAvgMsg
 000000A9  52		     1		push	edx
 000000AA  8B 15 00000237 R  1		mov		edx, pAvgMsg
 000000B0  E8 00000000 E     1		call	WriteString
 000000B5  5A		     1		pop		edx
 000000B6  A1 000002D1 R		mov		eax, dataAvg
 000000BB  E8 00000000 E		call	WriteDec
 000000C0  E8 00000000 E		call	CrLf

				; Print FareWell message
 000000C5  E8 00000000 E		call	CrLf
					displayString 	pGoodbye
 000000CA  52		     1		push	edx
 000000CB  8B 15 0000026D R  1		mov		edx, pGoodbye
 000000D1  E8 00000000 E     1		call	WriteString
 000000D6  5A		     1		pop		edx
 000000D7  E8 00000000 E		call	CrLF
 000000DC  E8 00000000 E		call	CrLF

				; exit to operating system
					exit	
 000000E1  6A 00	   *	    push   +000000000h
 000000E3  E8 00000000 E   *	    call   ExitProcess

				; +------------------------------------------------------------+
 000000E8			main ENDP
				; +============================================================+






				; +============================================================+
 000000E8			ReadVal PROC
				; Description:	Gets string of digits from user, then convert to
				;               numeric and validate input.
				; Receives:		@pStrBuffer (reference), @result (reference)
				; Returns:		
				; Pre:			
				; Reg Changed:	
				; +------------------------------------------------------------+
 = [ebp + 8]				pStrBuffer	EQU [ebp + 8]
 = [ebp + 12]				result		EQU [ebp + 12]

					mSetStackFrame
 000000E8  55		     1		push	ebp
 000000E9  8B EC	     1		mov		ebp, esp
 000000EB  50				push	eax
 000000EC  53				push	ebx
 000000ED  51				push	ecx
 000000EE  52				push	edx
 000000EF  56				push	esi
 000000F0  57				push	edi

				; Get string from user, setup ESI to point to pStrBuffer for lodsb and ensure we're moving forward
					getString	pValuePrompt, pStrBuffer
 000000F1  52		     1		push	edx
 000000F2  51		     1		push	ecx
 000000F3  52		     2		push	edx
 000000F4  8B 15 00000177 R  2		mov		edx, pValuePrompt
 000000FA  E8 00000000 E     2		call	WriteString
 000000FF  5A		     2		pop		edx
 00000100  8B 55 08	     1		mov		edx, pStrBuffer
 00000103  B9 00000028	     1		mov		ecx, BUFFER_SIZE 
 00000108  E8 00000000 E     1		call	ReadString
 0000010D  59		     1		pop		ecx
 0000010E  5A		     1		pop		edx
 0000010F			FRESH_STRING:
 0000010F  BB 00000000			mov			ebx, 0			; use ebx as accumulator because lodsb will overwrite eax
 00000114  8B 75 08			mov			esi, pStrBuffer
				; Convert digit string to numeric while validating user's input	

 00000117			CONVERT_STRING:
 00000117  AC				lodsb	 ; load next character from pStrBuffer into al
				 
				;f if character is 0, the null terminator for the string, then end of string - continue
 00000118  3C 00			cmp		al, 0
 0000011A  74 28			jz		END_OF_STRING

				; else if character's ascii value is not between ascii 0 and ascii 9, reprompt for string	
 0000011C  3C 30			cmp		al, ASCII_ZERO
 0000011E  72 2D			jb		BAD_INPUT
 00000120  3C 39			cmp		al, ASCII_NINE
 00000122  77 29			ja		BAD_INPUT

				; else do the conversion using algorithm and repeat loop
 00000124  2C 30			sub		al, 48		; convert from ascii to numeric reprsentation
 00000126  0F B6 C8			movzx	ecx, al		; save char in safe spot and make it a DWORD at same time
				; ebx = ebx * 10 + (digit) 
 00000129  8B C3			mov		eax, ebx	; eax = 'x'
 0000012B  BA 00000000			mov		edx, 0
 00000130  BF 0000000A			mov		edi, 10
 00000135  F7 E7			mul		edi			
				; If overflow, the uer's integer is too large to fit
 00000137  83 FA 00			cmp		edx, 0
 0000013A  75 11			JNZ		BAD_INPUT
 0000013C  03 C1			add		eax, ecx	
				; Check overflow again - addition might theoretically overflow too
 0000013E  72 0D			jc		BAD_INPUT
 00000140  8B D8			mov		ebx, eax		; ebx now as the integer as calculated so far
 00000142  EB D3			jmp		CONVERT_STRING

 00000144			END_OF_STRING:
				; finally compare it to the max int value and 
 00000144  B8 FFFFFFFF			mov		eax, MAX_UNSIGNED_INT
 00000149  3B D8			cmp		ebx, eax
 0000014B  71 25			jno		GOOD_INPUT

				; if bad, reprompt:
 0000014D			BAD_INPUT:
					getString	pBadInputMsg, pStrBuffer
 0000014D  52		     1		push	edx
 0000014E  51		     1		push	ecx
 0000014F  52		     2		push	edx
 00000150  8B 15 000001D8 R  2		mov		edx, pBadInputMsg
 00000156  E8 00000000 E     2		call	WriteString
 0000015B  5A		     2		pop		edx
 0000015C  8B 55 08	     1		mov		edx, pStrBuffer
 0000015F  B9 00000028	     1		mov		ecx, BUFFER_SIZE 
 00000164  E8 00000000 E     1		call	ReadString
 00000169  59		     1		pop		ecx
 0000016A  5A		     1		pop		edx
 0000016B  E8 00000000 E		call		CrLF
 00000170  EB 9D			jmp			FRESH_STRING

 00000172			GOOD_INPUT:

				; return value by reference
 00000172  8B 7D 0C			mov		edi, result
 00000175  89 1F			mov		[edi], ebx  ; store the result in EBX to the location pointed at by eax, which is result

				; Clean up stack and return
 00000177  5F				pop		edi
 00000178  5E				pop		esi
 00000179  5A				pop		edx
 0000017A  59				pop		ecx
 0000017B  5B				pop		ebx
 0000017C  58				pop		eax
					mCleanStackFrame 8
 0000017D  8B E5	     1		mov		esp, ebp 
 0000017F  5D		     1		pop		ebp
 00000180  C2 0008	     1		ret		8

				; +------------------------------------------------------------+
 00000183			ReadVal ENDP
				; +============================================================+


				; +============================================================+
 00000183			WriteVal PROC
				; Description:	Convert numeric value to a string of digits and
				;	        invoke the displayString macro to produce output
				; Receives:		
				; Returns:		
				; Pre:			
				; Reg Changed:	
				; +------------------------------------------------------------+
					mSetStackFrame
 00000183  55		     1		push	ebp
 00000184  8B EC	     1		mov		ebp, esp


				; Clean up stack and return
					mCleanStackFrame
 00000186  8B E5	     1		mov		esp, ebp 
 00000188  5D		     1		pop		ebp
 00000189  C3		     1		ret		

				; +------------------------------------------------------------+
 0000018A			WriteVal ENDP
				; +============================================================+



				; +============================================================+
 0000018A			getUserData PROC
				; Description:	
				;	        
				; Receives:		pNumArr: address of array to store values in
				;               arrSize: size of the array to store values in
				;               pStrArr: address of array to store/process keyboard input
				; Returns:		
				; Pre:			
				; Reg Changed:	
				; +------------------------------------------------------------+
 = [ebp + 8]				pNumArr		EQU [ebp + 8]   ; pointer to array to fill with data
 = [ebp + 12]				arrSize		EQU [ebp + 12]  ; size of array
 = [ebp + 16]				pStrArr		EQU	[ebp + 16]  ; the string used to store the user's input

					mSetStackFrame
 0000018A  55		     1		push	ebp
 0000018B  8B EC	     1		mov		ebp, esp
 0000018D  50				push	eax
 0000018E  52				push	edx
					
				; Set up loop
 0000018F  8B 4D 0C			mov		ecx, arrSize
 00000192  8B 7D 08			mov		edi, pNumArr

 00000195			FILL_ARR:
				; Call ReadVal with 2 args
 00000195  8B 55 10			mov		edx, pStrArr
 00000198  68 0000029D R		push	offset singleInt  ; singleInt pased by ref, gets return val by ref from ReadVal
 0000019D  52				push	edx				  ; pStrArr 
 0000019E  E8 FFFFFF45			call	ReadVal
				; DEBUG:
 000001A3  A1 0000029D R		mov		eax, singleInt
 000001A8  AB				stosd
 000001A9  E2 EA			loop	FILL_ARR

				; Clean up stack and return
 000001AB  5A				pop		edx
 000001AC  58				pop		eax
					mCleanStackFrame 12
 000001AD  8B E5	     1		mov		esp, ebp 
 000001AF  5D		     1		pop		ebp
 000001B0  C2 000C	     1		ret		12

				; +------------------------------------------------------------+
 000001B3			getUserData ENDP
				; +============================================================+



				; +============================================================+
 000001B3			sumAvgArray PROC
				; Description:	Calculates the sum and average of an array
				;	
				; Receives:		@pNumArr - pointer to an array of unsigned integers
				;				arrSize - size of the array
				;               @arrSum - address of DWORD to store sum in
				;               @arrAvg - address of DWORD to store average
				; Returns:		the sum of the array (arrSum) and average (arrAg)
				; Pre:			arrSum and arrAvg argument must = 0 prior to call
				; Reg Changed:	
				; +============================================================+
 = [ebp + 8]				pNumArr		EQU [ebp + 8]   ; array from which we read data
 = [ebp + 12]				arrSize		EQU [ebp + 12]  ; size of array
 = [ebp + 16]				arrSum		EQU [ebp + 16]  ; sum of values in array
 = [ebp + 20]				arrAvg		EQU [ebp + 20]	; average of values in array

				; Setup Stack Frame	
					mSetStackFrame
 000001B3  55		     1		push	ebp
 000001B4  8B EC	     1		mov		ebp, esp
 000001B6  56				push	esi
 000001B7  51				push	ecx	

				; Set up loop
 000001B8  8B 4D 0C			mov		ecx, arrSize
 000001BB  8B 75 08			mov		esi, pNumArr
 000001BE  8B 7D 10			mov		edi, arrSum
					
 000001C1			SUM_ARR:
 000001C1  AD				lodsd		; load next value in array into EAX and increment ESI
 000001C2  01 07			add		[edi], eax
 000001C4  E2 FB			loop	SUM_ARR
					

				; Clean up stack
 000001C6  5E				pop		esi
 000001C7  59				pop		ecx
					mCleanStackFrame 16
 000001C8  8B E5	     1		mov		esp, ebp 
 000001CA  5D		     1		pop		ebp
 000001CB  C2 0010	     1		ret		16
				; +------------------------------------------------------------+
 000001CE			sumAvgArray ENDP
				; +============================================================+

				; +============================================================+
 000001CE			printArray PROC
				; Description:	Calculates the sum and average of an array
				;	
				; Receives:		@pNumArr - pointer to an array of unsigned integers
				;				arrSize - size of the array
				;               @arrSum - address of DWORD to store sum in
				;               @arrAvg - address of DWORD to store average
				; Returns:		the sum of the array (arrSum) and average (arrAg)
				; Pre:			arrSum and arrAvg argument must = 0 prior to call
				; Reg Changed:	
				; +============================================================+
 = [ebp + 8]				pNumArr		EQU [ebp + 8]   ; array from which we read data
 = [ebp + 12]				arrSize		EQU [ebp + 12]  ; size of array

				; Setup Stack Frame	
					mSetStackFrame
 000001CE  55		     1		push	ebp
 000001CF  8B EC	     1		mov		ebp, esp
 000001D1  56				push	esi
 000001D2  51				push	ecx	

				; Set up loop
 000001D3  FC				cld
 000001D4  8B 4D 0C			mov		ecx, arrSize
 000001D7  8B 75 08			mov		esi, pNumArr
					
 000001DA			PRINT_ARR:
 000001DA  AD				lodsd
 000001DB  E8 00000000 E		call	writedec
 000001E0  E8 00000000 E		call	CrLf
 000001E5  E2 F3			loop	PRINT_ARR

				; Clean up stack
 000001E7  5E				pop		esi
 000001E8  59				pop		ecx
					mCleanStackFrame 8
 000001E9  8B E5	     1		mov		esp, ebp 
 000001EB  5D		     1		pop		ebp
 000001EC  C2 0008	     1		ret		8
				; +------------------------------------------------------------+
 000001EF			printArray ENDP
				; +============================================================+


				; +============================================================+
				END main
				; +============================================================+





				; +============================================================+
				; The below should not compile - template for functions


				; +============================================================+
				someprocess PROC
				; Description:	
				;	
				; Receives:		
				; Returns:		
				; Pre:			
				; Reg Changed:	
				; +============================================================+

					
					ret
				; +------------------------------------------------------------+
				someprocess ENDP
				; +------------------------------------------------------------+

Microsoft (R) Macro Assembler Version 14.00.23506.0	    02/25/16 22:55:28
3Programming Assignment 6    (project06-hillyer.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc
mCleanStackFrame . . . . . . . .	Proc
mSetStackFrame . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002D5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001EF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000E8 _TEXT	Length= 0000009B Public STDCALL
  FRESH_STRING . . . . . . . . .	L Near	 0000010F _TEXT	
  CONVERT_STRING . . . . . . . .	L Near	 00000117 _TEXT	
  END_OF_STRING  . . . . . . . .	L Near	 00000144 _TEXT	
  BAD_INPUT  . . . . . . . . . .	L Near	 0000014D _TEXT	
  GOOD_INPUT . . . . . . . . . .	L Near	 00000172 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000183 _TEXT	Length= 00000007 Public STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getUserData  . . . . . . . . . .	P Near	 0000018A _TEXT	Length= 00000029 Public STDCALL
  FILL_ARR . . . . . . . . . . .	L Near	 00000195 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E8 Public STDCALL
printArray . . . . . . . . . . .	P Near	 000001CE _TEXT	Length= 00000021 Public STDCALL
  PRINT_ARR  . . . . . . . . . .	L Near	 000001DA _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sumAvgArray  . . . . . . . . . .	P Near	 000001B3 _TEXT	Length= 0000001B Public STDCALL
  SUM_ARR  . . . . . . . . . . .	L Near	 000001C1 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ASCII_NINE . . . . . . . . . . .	Number	 00000039h   
ASCII_ZERO . . . . . . . . . . .	Number	 00000030h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00000028h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DATA_ARRAY_SIZE  . . . . . . . .	Number	 0000000Ah   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_BUFFER_SIZE  . . . . . . . .	Number	 0000000Bh   
MAX_DIGITS . . . . . . . . . . .	Number	 0000000Ah   
MAX_UNSIGNED_INT . . . . . . . .	Number	 FFFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrAvg . . . . . . . . . . . . .	Text   	 [ebp + 20]
arrSize  . . . . . . . . . . . .	Text   	 [ebp + 12]
arrSum . . . . . . . . . . . . .	Text   	 [ebp + 16]
avgMsg . . . . . . . . . . . . .	Byte	 00000226 _DATA	
badInputMsg  . . . . . . . . . .	Byte	 0000017B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dataAvg  . . . . . . . . . . . .	DWord	 000002D1 _DATA	
dataSum  . . . . . . . . . . . .	DWord	 000002CD _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000023B _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructions . . . . . . . . . .	Byte	 0000005D _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numbersMsg . . . . . . . . . . .	Byte	 000001DC _DATA	
pAvgMsg  . . . . . . . . . . . .	DWord	 00000237 _DATA	
pBadInputMsg . . . . . . . . . .	DWord	 000001D8 _DATA	
pGoodbye . . . . . . . . . . . .	DWord	 0000026D _DATA	
pInstructions  . . . . . . . . .	DWord	 00000150 _DATA	
pIntro . . . . . . . . . . . . .	DWord	 00000059 _DATA	
pNumArr  . . . . . . . . . . . .	Text   	 [ebp + 8]
pNumbersMsg  . . . . . . . . . .	DWord	 00000200 _DATA	
pRawStringIn . . . . . . . . . .	DWord	 000002C9 _DATA	
pStrArr  . . . . . . . . . . . .	Text   	 [ebp + 16]
pStrBuffer . . . . . . . . . . .	Text   	 [ebp + 8]
pSumMsg  . . . . . . . . . . . .	DWord	 00000222 _DATA	
pUserData  . . . . . . . . . . .	DWord	 00000299 _DATA	
pValuePrompt . . . . . . . . . .	DWord	 00000177 _DATA	
rawStringIn  . . . . . . . . . .	Byte	 000002A1 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
result . . . . . . . . . . . . .	Text   	 [ebp + 12]
singleInt  . . . . . . . . . . .	DWord	 0000029D _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 00000204 _DATA	
userDataSize . . . . . . . . . .	Number	 00000028h   
userData . . . . . . . . . . . .	DWord	 00000271 _DATA	
valuePrompt  . . . . . . . . . .	Byte	 00000154 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
